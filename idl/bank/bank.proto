syntax = "proto3";

package bank;
option go_package = "github.com/lyfeyvutha/grpcATCbank/gen/bank";


import "common/types.proto";

service Bank {
    rpc Deposit(types.Transfer) returns (Cash) {}
    rpc Withdraw(WithdrawRequest) returns (types.Transfer) {}
    rpc GetCashBalance(types.User) returns (Cash) {}
    rpc GetTransfers(types.User) returns (stream types.Transfer) {}
    rpc GetTransferStatement(types.User) returns (types.TransferStatement) {}
    rpc Invest(stream Action) returns (stream InvestInfo) {}
}

message WithdrawRequest {
    types.User user = 1;
    int32   cashCnt = 2;
}

message Cash {
    int32 count = 1;
}

enum ActionType {
    BUY = 0;
    SELL = 1;
}

message Action {
    types.User user = 1;
    ActionType type = 2;
    int32 stocksCount = 3;
}

enum InvestType {
    STOCK_INFO = 0;
    ACTION_RESULT = 1;
}

message StockInfo {
    string name = 1;
    int32 price = 2;
}

message ActionResult {
    string msg = 1;
}

message InvestInfo {
    InvestType type = 1;
    StockInfo info = 2;
    ActionResult result = 3;
}
/* TODO:
  This proto file should contain a single service, named Casino and several defined types.

  The types are as follows: 
    Tokens - message with a single field int32 count
    WithdrawRequest - message with fields User user and int32 tokensCnt
    ActionType - enum with values BUY and SELL
    Action - message with fields: 
    User user 
    ActionType type 
    int32 stocksCount
    GambleType - enum with values STOCK_INFO and ACTION_RESULT
    StockInfo - message with fields string name and int32 price
    ActionResult - message with field string message 
    GambleInfo - message with fields:
    GambleType type
    StockInfo info
    ActionResult result

  The service should contain the following routines:
    BuyTokens - accepts a Payment and returns Tokens
    Withdraw - accepts a WithdrawRequest and returns a Payment
    GetTokenBalance - accepts a User and returns Tokens
    GetPayments - accepts a User and returns a stream Payment
    GetPaymentStatement - accepts a User and returns a PaymentStatement
    Gamble - accepts a stream Action and returns a stream GambleInfo

  The types User, Payment and PaymentStatement are defined in idl/common/types.proto.
 */
